<?xml version="1.0"?>
<paper>
<title>Simple Article</title>
<credits>by Martin Fowler</credits>
<!-- I add a new version element each time I make a significant update
to the article. The most recent update should go at the top, it's date
is used as the date of the article. There must be at least one version
element and all version elements need a date. -->
<version date="2012-07-24">Rewrite to provide a fuller example</version>
<version date="2012-07-04">First draft stub</version>
<author>
  <!-- add one <author> element for each author on the article. Only the
  <author-name> is required, but the other elements are usually useful.-->
  <author-name>Martin Fowler</author-name>
  <author-url>http://martinfowler.com</author-url>
  <author-bio>
    <p>Author, speaker, and loud-mouth on sofware development. </p>
  </author-bio>
  <author-photo src="mf.jpg" />
</author>

<abstract>
Explains how to use this tool-chain for writing simple articles.
</abstract>

<body>
  <!-- You can place <p> elements before the first <section> element, but
       once you have a section, all remaining blocks should be inside
       a section. -->
<p>This is an example of a simple article that uses my xml-to-html
toolchain. It acts on two levels, you can read the html to understand
how things are put together, and you can also look at the XML source
to understand how that looks. I have some comments in the XML source
that add some further information about the XML elements that are used.</p>
<section>
<h>Making your own document folder</h>
<p>The sample folder here is a simple sample to get you started and
provide some examples to base your own articles from. Rather than
modify this sample folder in the mfweb repo, it's best to create your
own work folder in a separate repo. You can start this simply by
copying the sample folder into another location.</p>
<p>To get your new folder to build in that location, you will need to
make a change to the rakefile that controls the build process to point
to the mfweb directory. Look for the line <code>MFWEB_DIR =
'../'</code> at the top of the file and change the path to point to
location of the mfweb folder. Once you've done that you should be able
to execute <code>rake</code> in the new location and that will rebuild
the sample files.</p>
<p>The rakefile controls the build of the articles. There are comments
in the file to explain what various things do if you'd like to tweak
it.</p>
</section>
<section>
  <h>Simple and Flexible Articles</h>
  <p>The toolchain supports two styles of writing articles, simple and
  flexible. Simple articles have limited code inclusion and packaging
  capabilities, and are best used for articles that don't need to
  connect to a live code base, don't need to be grouped into a
  single folder with their diagrams code etc, and don't need any
  custom handling for transformations or css.</p>
  <p>In this web page, I'll just describe the facilities of the simple
  article, there is <a href = "flexible.html">another web page to
  discuss flexible articles</a>. Simple articles should have their
  source xml file placed in <code>your-folder/articles/simple</code>.
  All xml files found in that folder will be transformed into
  <code>your-folder/build/articles</code>. The only thing that's
  different between a simple article and a flexible article is the way
  the articles sources are organized - they both look the same to the
  reader.</p>
</section>
<section>
  <h>Overall Structure of an Article</h>
  <p>Simple articles have a top-level element of <code>paper</code>.
  The child elements of paper begin with various header elements,
  followed by the <code>body</code> element that contains the body of
  the article, and finally an optional <code>appendix</code>.</p>
  <section>
    <h>Header Elements</h>
    <p>The example article shows off the various header elements.
    These should be fairly self-explanatory. It's worth highlighting
    that you need at least one <code>version</code> element, as the
    first <code>version</code> sets the date of the article.</p>
  </section>
  <section>
    <h>Body and appendix sections</h>
    <p>The body of the article should include the core content of the
    article. The body can be divided into sections. Each section must
    start with an <code>h</code> element and then 
    block elements. You may have block elements before the first
    section. You may also nest sections within each other.</p>
    <sidebar>
      <p>You can specify sidebars - handy for call outs and links</p>
    </sidebar>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed
    do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
    enim ad minim veniam, quis nostrud exercitation ullamco laboris
    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
    reprehenderit in voluptate velit esse cillum dolore eu fugiat
    nulla pariatur. Excepteur sint occaecat cupidatat non proident,
    sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    <soundbite>Soundbites are like sidebars, but for the semantics of
    pull quotes. </soundbite>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed
    do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
    enim ad minim veniam, quis nostrud exercitation ullamco laboris
    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
    reprehenderit in voluptate velit esse cillum dolore eu fugiat
    nulla pariatur. Excepteur sint occaecat cupidatat non proident,
    sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    <p>The appendix can also have sections in the same way as the body.</p>
    </section>
</section>
<section>
  <h>Markup elements</h>
<section>
  <h>Basic elements</h>
  <p>The basic elements of an article are mostly copied from HTML.
  Block elements include <code>p</code>, 
  <code>ul</code> and <code>li</code>. Inline
  elements include <code>code</code>, <code>i</code>, <code>b</code>,
  <code>a</code>, <code>sub</code>, <code>sup</code>, and
  <code>br</code>.</p>
</section>
<section>
  <h>Code listings</h>
  <p>A particularly important feature of the toolchain is its ability
  to import code from live code projects. This allows me to annotate a
  live code project with marker comments and then extract bits of code
  from those code trees into the HTML output. To do this properly, you
  need to use a flexible article, so that you can set up the path of
  the code tree in the build script, but there is some limited support
  for code imports for simple articles.</p>
  <p>The element to use for a code import is <code>insertCode</code>,
  here is an example of it in use.</p>
  <insertCode file="simpleArticle/example.rb" fragment="first"
              label="some code"/>
  <p>A code fragment can have a label to introduce it. You can also
  nest code fragments to pick out smaller parts that have been shown
  in total, such as picking out one line below.</p>
  <insertCode file="simpleArticle/example.rb" fragment="oneLine"/>
  <p>I often use the label atrtribute to indicate the context of a
  code fragment. Usually this context is the name of a class, so there
  is a crude way to get the code importer to derive the class
  name.</p>
   <insertCode file="simpleArticle/example.rb" fragment="second" 
               useClassName="true"/>
  <p> Beware that this mechanism is easily confused if you have nested
  classes in a file.</p>
  <p>The files you need for code fragments in a simple article must
  live in <code>articles/simple/code</code>. I like to then use either
  a file or folder with the same name as the article to help keep code
  fragments apart. This simplificaiton makes code insertions less
  useful for simple articles than for flexible artilces. Indeed you
  don't need code inserts at all, you can just use 
  <code>pre</code> elements directly. One advantage with code inserts
  is that they automatically wrap the inserted code inside
  <code>CDATA</code> nodes which means you don't have to worry about
  escaping XML reserverd  symbols.</p>
</section>
<section>
  <h>Tables</h>
  <p>Tables can be specified using the same elements as HTML, which
  are copied over directly to the output. However I usually prefer to
  use semantic markup in these cases.</p>
</section>

<section>
<h>Referring to other things</h>
<p>There are a number of mechanisms I use for references to other
things on web and in older worlds. The simplest web reference is the
<code>a</code> element, which works just like HTML usually does.</p>
<p>For a simple reference to a book, eg <book isbn="0321278658">XP
Explained</book> you can use the <code>book</code> element. This uses an
<code>isbn</code> attribute to link directly to amazon (using my amazon affiliate
information so I can buy more Nice Things). For an amazon link that
<amazon key="B0040JHVCC">isn't a book</amazon>, there is a different
<code>amazon</code> element.</p>
<p>To refer to an article in my bliki, there is a
<code>blikiRef</code> element, so I can easily refer to a <blikiRef
name="MemoryImage"/> with some very crude pluralization for <blikiRef
name="MemoryImage" mode="plural"/>.</p>

<p>When building a paper, you can supply a bibliography for citations.
You can then include a citation either as <cite
name="beckXPE"> a link around text</cite> or just
stand-alone <cite name="beckXPE"/>. </p>
<p>For simple articles, the bibliography section must be in
the article itself.</p>
<p>My processing of the bibliography is limited, as all
I want is links. The bibliography consists of a list of
<code>ref</code> elements. The processor looks for a
<code>url</code>element embedded somewhere in the ref element, and
uses that. Failing that it looks to see if there's a <code>book</code>
element in there, and if that book contains an <code>isbn</code>
element. If so it forms a url to amazon using that isbn. Everything
else is ignored as I find that with web material, only links count.</p>
<p>On the whole the bibilography processing is rather more messy than
I would like and I'm tempted to junk it entirely. Most of my
references these days are to links or books, for which I can use
regular <code>a</code> and <code>book</code> elements.</p>


</section>
<section>
  <h>Images</h>
  <p>Simple inline images <img src="images/simpleArticle/blob.png"
  height = "12px"/> can be made with an <code>img</code> 
  element. </p>
  <p>For more involved figures, you can use a <code>figure</code>
  element.</p>
  <figure src="images/simpleArticle/2box.png">Some meaningless diagram
  with an uninformative caption</figure>
  <p>Figures can have captions and can be referred to with a
  <code>figureRef</code> element, which will link to it with a
  numbered bit of hypertext  like <figureRef
  ref="images/simpleArticle/2box.png"/></p>
 <photo src="images/simpleArticle/tower.jpg" 
         width="200" layout="right">Tower bridge in colorful light</photo>
  <p>I have a different block element for <code>photo</code>. This can
  also accept a caption, but doesn't generate a figure number. It can
  also accept a photo credit, so that the photo is properly
  attributed.</p>
   <p>The photo can either be made to float to the right, or be in
  flow by setting the <code>layout</code> attribute. This generates
  div blocks for the photo and caption with different css classes.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed
    do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
    enim ad minim veniam, quis nostrud exercitation ullamco laboris
    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
    reprehenderit in voluptate velit esse cillum dolore eu fugiat
    nulla pariatur. Excepteur sint occaecat cupidatat non proident,
    sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
  <photo src="images/simpleArticle/tower.jpg" credit="Martin Fowler"
         width="500" layout="full"/>
</section>
<section>
  <h>Quotes</h>
  <quote ref = "beckXPE" credit = "Kent Beck"><p>Embrace
  Change</p></quote>
  <p>Quotes act as their own block. The <code>ref</code> attribute is
  a key into the bibliography, the <code>credit</code> attribute puts
  accreditation to the quote. Both of the attributes are optional.</p>
</section>
<section>
  <h>Footnotes</h>
  <p>To add a footnote, use a <code>footRef</code> element. <footRef
  key="simple"/><footRef key = "head"/>. Footnotes will be displayed
  wherever you add a <code>display-footnotes</code> element. </p>
</section>
</section>
</body>

<appendix>  
<section>
<h>Appendix</h>
<p>The appendix is separated and rendered slightly differently. It's
good for secondary items, acknowledgements, and the like.</p>
</section>
<display-footnotes/>
</appendix>
<footnote-list>
  <footnote key="simple">Footnotes can be written in a
  <code>footnote-list</code> at the end of the paper. Simple footnotes
  like this are just inline elements and text inside the
  <code>footnote</code> element. I use this style for single-paragraph footnotes.
</footnote>
  <footnote key = "head">
    <h>Footnote heading</h>
    <p>Longer footnotes can have an optional heading and contain any block elements.</p>
  </footnote>
</footnote-list>
<bibliography>
<ref name="beckXPE">
		<cite>[Beck XPE]</cite>
		<book>
			<author>Kent Beck</author>
			<title>Extreme Programming Explained: Embrace Change</title>
			<pub>Addison Wesley</pub>
			<isbn>0201616416</isbn>
			<date>2000</date>
		</book>
</ref>
</bibliography>

</paper>